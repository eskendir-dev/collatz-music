import numpy as np
from scipy.io.wavfile import write

# ---------- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã ----------
SAMPLE_RATE = 44100   # –∫–∞—á–µ—Å—Ç–≤–æ –∑–≤—É–∫–∞ (–ì—Ü)
AMPLITUDE = 0.7       # –º—è–≥–∫–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å
BASE_MIDI = 60        # –±–∞–∑–æ–≤–∞—è –Ω–æ—Ç–∞ (–î–æ)
DUR_SHORT = 0.18      # –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á—ë—Ç–Ω—ã—Ö —á–∏—Å–µ–ª
DUR_LONG  = 0.35      # –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –Ω–µ—á—ë—Ç–Ω—ã—Ö —á–∏—Å–µ–ª
GAP = 0.05            # –ø–∞—É–∑–∞ –º–µ–∂–¥—É –Ω–æ—Ç–∞–º–∏

# ---------- –¶–µ–ø–æ—á–∫–∞ –ö–æ–ª–ª–∞—Ç—Ü–∞ ----------
def collatz_sequence(n):
    seq = [n]
    while n != 1:
        if n % 2 == 0:
            n = n // 2
        else:
            n = 3*n + 1
        seq.append(n)
    return seq

# ---------- –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ MIDI -> —á–∞—Å—Ç–æ—Ç–∞ ----------
def midi_to_freq(midi_note):
    return 440.0 * (2 ** ((midi_note - 69) / 12.0))

# ---------- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –º—è–≥–∫–æ–π –Ω–æ—Ç—ã ----------
def make_tone(freq, duration):
    t = np.linspace(0, duration, int(SAMPLE_RATE*duration), False)

    # –û—Å–Ω–æ–≤–Ω–∞—è –º—è–≥–∫–∞—è —Å–∏–Ω—É—Å–æ–∏–¥–∞
    tone = np.sin(freq * t * 2 * np.pi)

    # –î–æ–±–∞–≤–∏–º –ª—ë–≥–∫–∏–µ –æ–±–µ—Ä—Ç–æ–Ω—ã (–æ—á–µ–Ω—å —Ç–∏—Ö–∏–µ, –¥–ª—è —Ç–µ–ø–ª–æ—Ç—ã)
    tone += 0.2 * np.sin(2 * freq * t * 2 * np.pi)   # –≤—Ç–æ—Ä–∞—è –≥–∞—Ä–º–æ–Ω–∏–∫–∞
    tone += 0.1 * np.sin(3 * freq * t * 2 * np.pi)   # —Ç—Ä–µ—Ç—å—è –≥–∞—Ä–º–æ–Ω–∏–∫–∞

    # –ü–ª–∞–≤–Ω—ã–π fade-in / fade-out (—á—Ç–æ–±—ã –∑–≤—É–∫ –Ω–µ –±—ã–ª —Ä–µ–∑–∫–∏–º)
    fade_len = int(0.05 * len(t))  # 5% –æ—Ç –¥–ª–∏–Ω—ã –Ω–æ—Ç—ã
    fade_in = np.linspace(0, 1, fade_len)
    fade_out = np.linspace(1, 0, fade_len)
    envelope = np.ones(len(t))
    envelope[:fade_len] = fade_in
    envelope[-fade_len:] = fade_out
    tone = tone * envelope

    # –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ –º—è–≥–∫–∞—è –≥—Ä–æ–º–∫–æ—Å—Ç—å
    tone = tone / np.max(np.abs(tone))
    return tone * AMPLITUDE

# ---------- –í–≤–æ–¥ —á–∏—Å–ª–∞ ----------
start_number = int(input("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –º—É–∑—ã–∫–∏ –ö–æ–ª–ª–∞—Ç—Ü–∞: "))
sequence = collatz_sequence(start_number)

# ---------- –°–æ–∑–¥–∞–Ω–∏–µ –∞—É–¥–∏–æ ----------
audio = np.array([], dtype=np.float32)

for n in sequence:
    midi = BASE_MIDI + (n % 7)
    freq = midi_to_freq(midi)
    dur = DUR_SHORT if n % 2 == 0 else DUR_LONG
    tone = make_tone(freq, dur)
    audio = np.concatenate([audio, tone, np.zeros(int(GAP*SAMPLE_RATE))])

# ---------- –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ----------
audio_int16 = np.int16(audio/np.max(np.abs(audio)) * 32767)
write("collatz_soft.wav", SAMPLE_RATE, audio_int16)

print("–§–∞–π–ª collatz_soft.wav —Å–æ–∑–¥–∞–Ω! –û–Ω –±—É–¥–µ—Ç –∑–≤—É—á–∞—Ç—å –º—è–≥–∫–æ –∏ —É—é—Ç–Ω–æ üé∂")

